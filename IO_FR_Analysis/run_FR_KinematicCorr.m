function run_FR_KinematicCorr(IO_DataDir, ephysTbl_Dir, ephys_offset, MoveDir_CaseID, FR_SummaryTbl, kinSummaryTbl)

% run_FR_KinematicCorr  Correlate per‐trial firing rates with kinematic features.
%
% This function loads spike-per-move tables and kinematic data, computes correlations,
% and writes a master CSV containing trial-level data along with correlation metrics.
% Additionally, it generates scatter plots with linear fits.


%% ==== TOGGLE OPTIONS ====

useActualDuration = false;      % false = fixed window_FR Option B
window_FR         = [-0.05 0.45]; % FR window (s) for Option B
AO_spike_fs       = 44000;      % sampling rate

outlierStrategy   = 'remove';   % 'remove' | 'flag'
logTransformFR    = false;      % log‐transform FR if heavy‐tailed
logTransformKin   = false;      % log‐transform kin features
zscoreFR          = false;      % z‐score FR before correlation
zscoreKin         = false;      % z‐score kin features
useSpearman       = false;      % fallback to Spearman if non‐normal


%% Output directories

output_CorrDir      = fullfile(ephysTbl_Dir,'FR_Kinematics');
output_kinAnalysisDir = fullfile(IO_DataDir, 'Kinematic Analyses', MoveDir_CaseID);
if ~exist(output_CorrDir,'dir'), mkdir(output_CorrDir); end

%% Confirm FR summary generated by run_IO_FR_Analysis_and_Plotting 

% Load spike‐per‐trial table 
cd(ephysTbl_Dir);
allSPKmats = dir('*Spikes*.mat');
allSPKnames = {allSPKmats.name};
if ephys_offset
    matfile = allSPKnames{contains(allSPKnames,'offset') & contains(allSPKnames,'Spikes')};
else
    matfile = allSPKnames{~contains(allSPKnames,'offset') & contains(allSPKnames,'Spikes')};
end
load(matfile,'All_SpikesPerMove_Tbl');

disp('FR_SummaryTbl columns:');
disp(FR_SummaryTbl.Properties.VariableNames);


%% Confirm kinematic feature summary generated by run_MovementFeatureAnalysis_IO_v2

cd(output_kinAnalysisDir)

disp('kinSummaryTbl columns:');
disp(kinSummaryTbl.Properties.VariableNames);


%% Split TrialID col of kinSummaryTbl to match by MoveTrialID and MoveType

% Split TrialID into components
splitTrialID = cellfun(@(x) split(x, '_'), kinSummaryTbl.TrialID, 'UniformOutput', false);

[CaseDate, MoveTrialID] = arrayfun(@extract_MoveTrialID, kinSummaryTbl.TrialID, 'UniformOutput', false);

% Append to kinSummaryTbl
kinSummaryTbl.CaseDate = CaseDate;
kinSummaryTbl.MoveTrialID = MoveTrialID;

disp('updated kinSummaryTbl columns:');
disp(kinSummaryTbl.Properties.VariableNames);

%% Merge kinSummaryTbl with FR_SummaryTbl using MoveTrialID and MoveType

masterTbl = innerjoin(FR_SummaryTbl, kinSummaryTbl, 'Keys', {'MoveTrialID', 'MoveType'});

% Display the result of the join (masterTbl)
disp('masterTbl columns:');
disp(masterTbl.Properties.VariableNames);

% Optionally, save the merged table as a CSV
writetable(masterTbl, 'Merged_FR_Kin_Summary.csv')


%% Transforms & outlier handling, if needed

% Identify numeric columns for outlier detection 
numericVars = varfun(@isnumeric, masterTbl, 'OutputFormat', 'uniform');
numericCols = masterTbl(:, numericVars);

% Remove outliers if 'remove' strategy is selected
if strcmpi(outlierStrategy, 'remove')
    ok = all(~isoutlier(numericCols{:,:}), 2);
    masterTbl = masterTbl(ok, :);
end

% Log-transform if flagged
if logTransformFR
    masterTbl.FR_Hz = log(masterTbl.FR_Hz + eps);
end
if logTransformKin
    kinCols = setdiff(masterTbl.Properties.VariableNames, {'MoveTrialID', 'FR_Hz'});
    masterTbl{:, kinCols} = log(masterTbl{:, kinCols} + eps);
end

% Z-score if flagged
if zscoreFR
    masterTbl.FR_Hz = zscore(masterTbl.FR_Hz);
end
if zscoreKin
    kinCols = setdiff(masterTbl.Properties.VariableNames, {'MoveTrialID', 'FR_Hz'});
    masterTbl{:, kinCols} = zscore(masterTbl{:, kinCols});
end



%% Correlation analysis per MoveType and Depth

movTypes = unique(masterTbl.MoveType);
depths   = unique(masterTbl.Depth);

% Kinematic features to correlate (keep simple for now)
kinFeatures = {'MeanAmp', 'MeanVel'};

corrResults = table([], [], [], [], [], [], [], [], ...
    'VariableNames', {'MovementType','Depth','KinematicFeature','N','R','p','FisherZ','Method'});

% Table to store correlation results
corrResults = table([], [], [], [], [], [], [], [], ...
    'VariableNames', {'MovementType','Depth','KinematicFeature','N','R','p','FisherZ','Method'});


% Convert MoveType and Depth to usable character format
if iscategorical(masterTbl.MoveType)
    masterTbl.MoveType = cellstr(masterTbl.MoveType);
end
if iscategorical(masterTbl.Depth)
    masterTbl.Depth = cellstr(masterTbl.Depth);
elseif isnumeric(masterTbl.Depth)
    masterTbl.Depth = cellstr(string(masterTbl.Depth));
end


%% Perform correlation analysis

for m = 1:numel(movTypes)
    for d = 1:numel(depths)
        fprintf('  %s × %s: ', movTypes{m}, depths{d});
        sel = strcmp(masterTbl.MoveType, movTypes{m}) & strcmp(masterTbl.Depth, depths{d});
        fprintf('%d trials\n', sum(sel));

        for k = 1:numel(kinFeatures)
            kinFeat = kinFeatures{k};

            % Select subset of trials
            sub = masterTbl(sel, :);
            if height(sub) < 3 || all(isnan(sub.(kinFeat)))
                continue;
            end

            x_corr_FR = sub.Mean_FR_Hz;  
            y_corr_kinFts = sub.(kinFeat);  


            % Pearson correlation for all trials
            [R, p] = corr(x_corr_FR, y_corr_kinFts, 'Type', 'Pearson');
            method = 'Pearson';  % using Pearson correlation exclusively for now

            % Fisher z-transform for effect size
            eff = atanh(R);

            % Store result
            newRow = {movTypes{m}, depths{d}, kinFeat, height(sub), R, p, eff, method};
            corrResults = [corrResults;
                cell2table(newRow, 'VariableNames', ...
                {'MovementType','Depth','KinematicFeature','N','R','p','FisherZ','Method'})];

            % Save scatter plot
            fig = figure('Visible', 'off');
            scatter(x_corr_FR, y_corr_kinFts, 50, 'filled'); hold on;
            lsline;
            xlabel('Firing Rate (Hz)');
            ylabel(kinFeat);
            title(sprintf('%s | %s | %s: R = %.2f, p = %.3f (%s)', ...
                depths{d}, movTypes{m}, kinFeat, R, p, method));
            saveas(fig, fullfile(output_CorrDir, ...
                sprintf('%s_%s_%s_corr.png', movTypes{m}, depths{d}, kinFeat)));
            close(fig);
        end
    end
end

%% Write results to CSV

writetable(corrResults, fullfile(output_CorrDir, 'Correlation_Summary.csv'));

fprintf('Done! Master CSV and Correlation results saved in: %s\n', output_CorrDir);

if isempty(corrResults)
    warning('No valid correlation results were computed. Check thresholds and data inputs.');
end

end

%% Helper Function

function [CaseDate, MoveTrialID] = extract_MoveTrialID(TrialID)
% extract_MoveTrialID - Extract CaseDate and MoveTrialID from TrialID string
%
% Handles multiple formats, including:
%   "20230323_b1_d1p06_session001"
%   "20230518_LH_b1_d0p18_session001"

% Default values
CaseDate = '';
MoveTrialID = '';

% Format A: "20230323_b1_d1p06_session001"
tokensA = regexp(TrialID, '^(20\d{6})_([bct]\d+_d\d+p\d+)_session\d+$', 'tokens');

% Format B: "20230518_LH_b1_d0p18_session001"
tokensB = regexp(TrialID, '^(20\d{6})_([LR]H)_([bct]\d+_d\d+p\d+)_session\d+$', 'tokens');

if ~isempty(tokensA)
    CaseDate = tokensA{1}{1};
    MoveTrialID = tokensA{1}{2};
elseif ~isempty(tokensB)
    CaseDate = tokensB{1}{1};
    MoveTrialID = tokensB{1}{3};  % Note: tokensB{1}{2} is Hemisphere
else
    warning('[WARN] Unrecognized TrialID format: %s', TrialID);
end
end

