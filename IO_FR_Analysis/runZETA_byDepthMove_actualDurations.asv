function [ZETA_Summary, all_sZETA, all_sRate, all_sLatencies] = runZETA_byDepthMove_actualDurations( ...
    All_SpikesPerMove_Tbl, AO_spike_fs, varargin)

% Run ZETA for each MoveType Ã— STN depth using true per-trial durations.
% Returns a summary table and per-subset sZETA/sRate/sLatencies collections.

p = inputParser;
p.addParameter('UseMaxDur_s', [], @(x) isempty(x) || isscalar(x));
p.addParameter('PadITI_s', 0.005, @(x) isscalar(x) && x>=0);
p.addParameter('Resamples', 2000, @(x) isscalar(x) && x>0);
p.addParameter('PlotFlag', 0, @(x) isscalar(x) && ismember(x,0:4));
p.addParameter('RestrictRange', [-inf inf], @(x) isnumeric(x) && numel(x)==2);
p.addParameter('DirectQuantile', false, @islogical);
p.addParameter('JitterSize', 2, @(x) isscalar(x) && x>0);
p.addParameter('Stitch', true, @islogical);
p.addParameter('DepthIDs', {'t','c','b'});
p.addParameter('MoveTypeOrder', {'HAND OC','HAND PS','ARM EF','REST'});
% your table defaults:
p.addParameter('SpikeField', 'C1', @(s) ischar(s) || isstring(s));
p.addParameter('StartField', 'TTL_spk_idx_Start', @(s) ischar(s) || isstring(s));
p.addParameter('StopField',  'TTL_spk_idx_End',   @(s) ischar(s) || isstring(s));
% optional lead-in/out (sec) if you saved padding:
p.addParameter('PreWindow_s',  0.050, @(x) isscalar(x) && x>=0);  % 50 ms pre-trial offset
p.addParameter('PostWindow_s', 0.000, @(x) isscalar(x) && x>=0);
p.parse(varargin{:});
U = p.Results;

move_types = intersect(U.MoveTypeOrder, unique(All_SpikesPerMove_Tbl.MoveType),'stable');

rows = {};
all_sZETA = {};       % cell array aligned to rows of ZETA_Summary
all_sRate = {};
all_sLatencies = {};

for m = 1:numel(move_types)
    for d = 1:numel(U.DepthIDs)
        mv = move_types{m};
        dz = U.DepthIDs{d};

        move_tbl = All_SpikesPerMove_Tbl( ...
            strcmp(All_SpikesPerMove_Tbl.MoveType, mv) & ...
            contains(All_SpikesPerMove_Tbl.move_trial_ID, dz), :);

        if isempty(move_tbl), continue; end

        % Build stitched inputs with true [start stop] and optional pre/post spikes
        [spkT, evTimes, useMaxDur, trialDur, kept_tbl] = makeZetaInputs_fromAOStartStopTimes( ...
            move_tbl, AO_spike_fs, ...
            'UseMaxDur_s', U.UseMaxDur_s, ...
            'PadITI_s',    U.PadITI_s, ...
            'SpikeField',  U.SpikeField, ...
            'StartField',  U.StartField, ...
            'StopField',   U.StopField, ...
            'PreWindow_s', U.PreWindow_s, ...
            'PostWindow_s',U.PostWindow_s);

        if isempty(spkT) || isempty(evTimes), continue; end

        % Run ZETA
        [pZ, sZ, sRate, sLat] = zetatest( ...
            spkT, evTimes, useMaxDur, ...
            U.Resamples, U.PlotFlag, U.RestrictRange, ...
            U.DirectQuantile, U.JitterSize, U.Stitch);

        % Pull optional mean-rate stats (field names differ by version)
        MeanD = getFieldOr(sZ,'dblMeanD', NaN);   % doc says dblMeanD
        MeanZ = getFieldOr(sZ,'dblMeanZ', NaN);   % code sometimes provides dblMeanZ
        MeanP = getFieldOr(sZ,'dblMeanP', NaN);

        % Collect in table row (include big vectors as cell entries)
        rows(end+1,:) = { ...
            mv, dz, height(kept_tbl), useMaxDur, ...
            pZ, sZ.dblZETA, sZ.dblD, sZ.dblP, ...
            sZ.dblZetaT, sZ.dblD_InvSign, sZ.dblZetaT_InvSign, ...
            getFieldOr(sRate,'dblPeakTime',nan), getFieldOr(sRate,'dblOnset',nan), ...
            mean(trialDur,'omitnan'), std(trialDur,'omitnan'), ...
            MeanD, MeanZ, MeanP, ...
            sZ.vecSpikeT(:)', ...            % spike timestamps at ZETA sampling grid
            sZ.dblUseMaxDur, ...             % ZETA's internal record of window length
            sZ.vecLatencies(:)'};            

        % Keep full structures for saving
        all_sZETA{end+1,1} = sZ;       
        all_sRate{end+1,1} = sRate;    
        all_sLatencies{end+1,1} = sLat; 
    end
end

varNames = { ...
    'MoveType','Depth','nTrials','UseMaxDur_s', ...
    'ZetaP','ZetaZ','ZetaD','ZetaP_again', ...
    'ZetaTime','ZetaD_Inv','ZetaTime_Inv', ...
    'IFR_PeakTime','IFR_OnsetTime', ...
    'MeanStimDur_s','StdStimDur_s', ...
    'MeanD','MeanZ','MeanP', ...
    'VecSpikeT','ZetaUseMaxDur','VecLatencies'};

if isempty(rows)
    ZETA_Summary = cell2table(cell(0,numel(varNames)), 'VariableNames', varNames);
else
    ZETA_Summary = cell2table(rows, 'VariableNames', varNames);
end
end

% ---------- utils ----------
function v = getFieldOr(S, fld, defaultVal)
if isempty(S) || ~isfield(S,fld) || isempty(S.(fld)), v = defaultVal; else, v = S.(fld); end
end
